steps:
# 1. Docker 이미지 빌드
- name: 'gcr.io/cloud-builders/docker'
  id: build-image
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      echo "🚀 1. Docker 이미지 빌드를 시작합니다..."
      docker build -t "${_ARTIFACT_REGISTRY}/${_PROJECT_ID_}/${_REPO_NAME_}/${_SERVICE_NAME_}:${SHORT_SHA}" -t "${_ARTIFACT_REGISTRY}/${_PROJECT_ID_}/${_REPO_NAME_}/${_SERVICE_NAME_}:latest" .
      echo "✅ 1. Docker 이미지 빌드 완료"

# 2. Docker 이미지 푸시
- name: 'gcr.io/cloud-builders/docker'
  id: push-image
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      echo "🚀 2. 이미지를 Artifact Registry에 푸시합니다..."
      docker push "${_ARTIFACT_REGISTRY}/${_PROJECT_ID_}/${_REPO_NAME_}/${_SERVICE_NAME_}" --all-tags
      echo "✅ 2. 이미지 푸시 완료"
  waitFor:
    - build-image

# 3. Cloud Run 서비스 배포
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  id: deploy-service
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      echo "🚀 3. Cloud Run 서비스 배포를 시작합니다..."
      gcloud run deploy "${_SERVICE_NAME_}" \
        --image="${_ARTIFACT_REGISTRY}/${_PROJECT_ID_}/${_REPO_NAME_}/${_SERVICE_NAME_}:${SHORT_SHA}" \
        --region="${_REGION_}" \
        --platform=managed \
        --allow-unauthenticated \
        --service-account="${_SERVICE_ACCOUNT_}" \
        --min-instances="${_MIN_INSTANCES}" \
        --max-instances="${_MAX_INSTANCES}" \
        --cpu="${_CPU}" \
        --memory="${_MEMORY}" \
        --timeout="${_TIMEOUT}" \
        --set-env-vars="PROJECT_ID=${_PROJECT_ID_},LOCATION_ID=${_LOCATION_ID_},MODEL_ID=${_MODEL_ID},DATASTORE_ID=${_DATASTORE_ID_},DATASTORE_LOCATION=${_DATASTORE_LOCATION_},DISCOVERY_ENGINE_ID=${_DISCOVERY_ENGINE_ID_},DISCOVERY_LOCATION=${_DISCOVERY_LOCATION_},DISCOVERY_COLLECTION=default_collection,DISCOVERY_SERVING_CONFIG=default_config,SYSTEM_PROMPT_PATH=prompt/prompt.txt,USE_SECRET_MANAGER=True,SERVE_STATIC=false"
      echo "✅ 3. Cloud Run 서비스 배포 완료"
  waitFor:
    - push-image

# 4. 헬스 체크
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  id: health-check
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      echo "🚀 4. 배포된 서비스의 헬스 체크를 시작합니다..."
      SERVICE_URL=$(gcloud run services describe ${_SERVICE_NAME_} --region=${_REGION_} --format="value(status.url)")
      if [ -z "$SERVICE_URL" ]; then
        echo "❌ 서비스 URL을 찾을 수 없습니다."
        exit 1
      fi
      echo "서비스 URL: $SERVICE_URL"
      for i in {1..12}; do
        echo "... 헬스 체크 시도 $i/12 ..."
        STATUS_CODE=$(curl -o /dev/null -s -w "%{\http_code}" --connect-timeout 5 --max-time 10 "$SERVICE_URL/api/health")
        if [ "$STATUS_CODE" -eq 200 ]; then
          echo "✅ 헬스 체크 성공! (상태 코드: $STATUS_CODE)"
          exit 0
        else
          echo "... 실패 (상태 코드: $STATUS_CODE)"
        fi
        if [ $i -lt 12 ]; then
          echo "... 10초 후 재시도 ..."
          sleep 10
        fi
      done
      echo "❌ 최종 헬스 체크 실패."
      exit 1
  waitFor:
    - deploy-service

# 빌드된 이미지 정보
images:
  - '${_ARTIFACT_REGISTRY}/${_PROJECT_ID_}/${_REPO_NAME_}/${_SERVICE_NAME_}:${SHORT_SHA}'
  - '${_ARTIFACT_REGISTRY}/${_PROJECT_ID_}/${_REPO_NAME_}/${_SERVICE_NAME_}:latest'

# 빌드 옵션
options:
  logging: CLOUD_LOGGING_ONLY

# 서비스 계정
serviceAccount: 'projects/${_PROJECT_ID_}/serviceAccounts/${_SERVICE_ACCOUNT_}'

# 치환 변수 기본값
substitutions:
  _PROJECT_ID: _PROJECT_ID_
  _REGION: _REGION_
  _LOCATION_ID: _LOCATION_ID_
  _SERVICE_NAME: _SERVICE_NAME_
  _REPO_NAME: _REPO_NAME_
  _SERVICE_ACCOUNT: _SERVICE_ACCOUNT_
  _ARTIFACT_REGISTRY: _REGION_-docker.pkg.dev
  _DATASTORE_ID: _DATASTORE_ID_
  _DATASTORE_LOCATION: global
  _DISCOVERY_ENGINE_ID: _DISCOVERY_ENGINE_ID_
  _DISCOVERY_LOCATION: global
  _MIN_INSTANCES: '0'
  _MAX_INSTANCES: '10'
  _CPU: '1'
  _MEMORY: 2Gi
  _TIMEOUT: 300s
  _MODEL_ID: gemini-pro
