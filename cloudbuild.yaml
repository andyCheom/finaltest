# Cloud Build 설정 파일 - GraphRAG 챗봇 API 지속적 배포
# Trigger: GitHub 연동 또는 수동 실행 시 자동 빌드/배포

substitutions:
  _PROJECT_ID: cheom-kdb-test1
  _REGION: asia-northeast3
  _REPO_NAME: trialanderror0724
  _SERVICE_NAME: testing0724
  _SERVICE_ACCOUNT: 580360941782-compute@developer.gserviceaccount.com
  _ARTIFACT_REGISTRY: asia-northeast3-docker.pkg.dev
  _MIN_INSTANCES: '1'
  _MAX_INSTANCES: '20'
  _CPU: '2'
  _MEMORY: '4Gi'
  _TIMEOUT: '900s'
  _DISCOVERY_ENGINE_ID: test_1753406039510

steps:
  # 1. 빌드 사전 검증
  - name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "🔍 빌드 환경 검증 중..."
        echo "프로젝트 ID: ${_PROJECT_ID}"
        echo "서비스명: ${_SERVICE_NAME}"
        echo "리전: ${_REGION}"
        echo "커밋 SHA: ${SHORT_SHA}"
        echo "브랜치: ${BRANCH_NAME}"
        
        # Dockerfile 존재 확인
        if [ ! -f "Dockerfile" ]; then
          echo "❌ Dockerfile이 존재하지 않습니다."
          exit 1
        fi
        
        # requirements.txt 검증
        if [ ! -f "requirements.txt" ]; then
          echo "❌ requirements.txt가 존재하지 않습니다."
          exit 1
        fi
        
        echo "✅ 빌드 사전 검증 완료"
    id: 'pre-build-validation'

  # 2. Docker 이미지 빌드
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - '${_ARTIFACT_REGISTRY}/${_PROJECT_ID}/${_REPO_NAME}/${_SERVICE_NAME}:${SHORT_SHA}'
      - '-t'
      - '${_ARTIFACT_REGISTRY}/${_PROJECT_ID}/${_REPO_NAME}/${_SERVICE_NAME}:latest'
      - '--cache-from'
      - '${_ARTIFACT_REGISTRY}/${_PROJECT_ID}/${_REPO_NAME}/${_SERVICE_NAME}:latest'
      - '.'
    id: 'build-image'
    waitFor: ['pre-build-validation']

  # 3. Docker 이미지 푸시
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - '--all-tags'
      - '${_ARTIFACT_REGISTRY}/${_PROJECT_ID}/${_REPO_NAME}/${_SERVICE_NAME}'
    id: 'push-image'
    waitFor: ['build-image']

  # 4. 보안 스캔 건너뜀 (GitHub Actions의 Trivy 스캔 사용)

  # 5. Cloud Run 배포 (Blue-Green 배포)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "🚀 Cloud Run 서비스 배포 시작 (Blue-Green 방식)..."
        
        # 권한 및 설정 확인
        echo "🔍 권한 및 설정 확인..."
        echo "프로젝트 ID: ${_PROJECT_ID}"
        echo "서비스 계정: ${_SERVICE_ACCOUNT}"
        echo "이미지: ${_ARTIFACT_REGISTRY}/${_PROJECT_ID}/${_REPO_NAME}/${_SERVICE_NAME}:${SHORT_SHA}"
        
        # Cloud Run API 활성화 확인
        gcloud services enable run.googleapis.com --project=${_PROJECT_ID} || echo "⚠️ Cloud Run API 이미 활성화됨"
        
        # --no-traffic 플래그를 사용하여 새 리비전을 배포하고 'candidate' 태그를 지정합니다.
        # 이 리비전은 처음에는 프로덕션 트래픽을 받지 않습니다.
        # 서비스가 존재하지 않으면 이 명령이 서비스를 생성합니다.
        
        # 서비스 존재 여부 확인
        if gcloud run services describe ${_SERVICE_NAME} --region=${_REGION} --quiet > /dev/null 2>&1; then
          echo "✅ 기존 서비스 발견, 업데이트 진행"
          gcloud run deploy ${_SERVICE_NAME} \
            --image=${_ARTIFACT_REGISTRY}/${_PROJECT_ID}/${_REPO_NAME}/${_SERVICE_NAME}:${SHORT_SHA} \
            --region=${_REGION} \
            --platform=managed \
            --service-account=${_SERVICE_ACCOUNT} \
            --min-instances=${_MIN_INSTANCES} \
            --max-instances=${_MAX_INSTANCES} \
            --cpu=${_CPU} \
            --memory=${_MEMORY} \
            --timeout=${_TIMEOUT} \
            --concurrency=80 \
            --no-traffic \
            --tag=candidate \
            --set-env-vars=PROJECT_ID=${_PROJECT_ID},DISCOVERY_LOCATION=global,DISCOVERY_COLLECTION=default_collection,DISCOVERY_ENGINE_ID=${_DISCOVERY_ENGINE_ID},DISCOVERY_SERVING_CONFIG=default_config,SYSTEM_PROMPT_PATH=prompt/prompt.txt
        else
          echo "🆕 새 서비스 생성"
          gcloud run deploy ${_SERVICE_NAME} \
            --image=${_ARTIFACT_REGISTRY}/${_PROJECT_ID}/${_REPO_NAME}/${_SERVICE_NAME}:${SHORT_SHA} \
            --region=${_REGION} \
            --platform=managed \
            --allow-unauthenticated \
            --service-account=${_SERVICE_ACCOUNT} \
            --min-instances=${_MIN_INSTANCES} \
            --max-instances=${_MAX_INSTANCES} \
            --cpu=${_CPU} \
            --memory=${_MEMORY} \
            --timeout=${_TIMEOUT} \
            --concurrency=80 \
            --tag=candidate \
            --set-env-vars=PROJECT_ID=${_PROJECT_ID},DISCOVERY_LOCATION=global,DISCOVERY_COLLECTION=default_collection,DISCOVERY_ENGINE_ID=${_DISCOVERY_ENGINE_ID},DISCOVERY_SERVING_CONFIG=default_config,SYSTEM_PROMPT_PATH=prompt/prompt.txt
        fi
        
        echo "✅ 새 리비전이 'candidate' 태그로 배포되었습니다."
    id: 'deploy-candidate'
    waitFor: ['push-image']

  # 6. 헬스 체크 및 검증
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "🏥 헬스 체크 시작..."
        
        # 후보 버전 URL 가져오기 (태그 방식)
        echo "서비스명: ${_SERVICE_NAME}"
        echo "리전: ${_REGION}"
        
        # 트래픽 상태 전체 확인
        echo "🔍 현재 트래픽 상태:"
        gcloud run services describe ${_SERVICE_NAME} \
          --region=${_REGION} \
          --format="table(status.traffic[].tag,status.traffic[].url,status.traffic[].percent)"
        
        # candidate 태그 URL 추출 (수정된 방법)
        HEALTH_URL=$$(gcloud run services describe ${_SERVICE_NAME} \
          --region=${_REGION} \
          --format="value(status.traffic[?tag='candidate'].url)")
        
        # 다른 방법으로도 시도 (python 사용)
        if [ -z "$$HEALTH_URL" ]; then
          echo "🔄 Python을 사용한 candidate URL 검색..."
          HEALTH_URL=$$(gcloud run services describe ${_SERVICE_NAME} \
            --region=${_REGION} \
            --format="json" | python3 -c "import sys, json; data = json.load(sys.stdin); [print(traffic.get('url', '')) for traffic in data.get('status', {}).get('traffic', []) if traffic.get('tag') == 'candidate'][:1]")
        fi
        
        # 그래도 없으면 기본 서비스 URL 사용
        if [ -z "$$HEALTH_URL" ] || [ "$$HEALTH_URL" = "null" ]; then
          echo "⚠️ candidate 태그 URL을 찾을 수 없습니다. 기본 서비스 URL을 사용합니다."
          HEALTH_URL=$$(gcloud run services describe ${_SERVICE_NAME} \
            --region=${_REGION} \
            --format="value(status.url)")
        fi
        
        if [ -z "$$HEALTH_URL" ]; then
          echo "❌ 서비스 URL을 찾을 수 없습니다."
          exit 1
        fi
        
        echo "헬스 체크 URL: $$HEALTH_URL"
        
        # 헬스 체크 (최대 5회 재시도)
        for i in {1..5}; do
          echo "헬스 체크 시도 $$i/5..."
          
          if curl -f -s --max-time 10 "$$HEALTH_URL/api/health" > /dev/null; then
            echo "✅ 헬스 체크 성공!"
            
            # 간단한 API 테스트
            echo "🧪 API 기능 테스트..."
            RESPONSE=$$(curl -s --max-time 60 -X POST "$$HEALTH_URL/api/generate" \
              -d "userPrompt=테스트" \
              -d "conversationHistory=[]")
            
            if echo "$$RESPONSE" | grep -q "answer\|summary_answer"; then
              echo "✅ API 기능 테스트 성공!"
              echo "URL=$$HEALTH_URL" > /workspace/candidate_url.txt
              exit 0
            else
              echo "⚠️ API 응답이 예상과 다릅니다: $$RESPONSE"
            fi
          else
            echo "❌ 헬스 체크 실패 (시도 $$i/5)"
          fi
          
          if [ $$i -lt 5 ]; then
            echo "30초 후 재시도..."
            sleep 30
          fi
        done
        
        echo "❌ 헬스 체크 최종 실패"
        exit 1
    id: 'health-check'
    waitFor: ['deploy-candidate']

  # 7. 트래픽 전환 (Blue-Green 배포 완료)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "🚀 프로덕션 트래픽 전환 시작..."
        
        # 모든 트래픽을 새 버전으로 전환
        gcloud run services update-traffic ${_SERVICE_NAME} \
          --to-tags=candidate=100 \
          --region=${_REGION}
        
        echo "✅ 트래픽 전환 완료!"
        
        # 배포 완료 알림
        echo "🎉 배포 성공!"
        echo "서비스 URL: https://${_SERVICE_NAME}-580360941782.${_REGION}.run.app"
        echo "커밋 SHA: ${SHORT_SHA}"
        echo "배포 시간: $(date)"
    id: 'traffic-switch'
    waitFor: ['health-check']

  # 8. 이전 버전 정리 (선택사항)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "🧹 이전 버전 정리 중..."
        
        # 태그 제거 (candidate 태그를 제거하여 정리)
        gcloud run services update-traffic ${_SERVICE_NAME} \
          --remove-tags=candidate \
          --region=${_REGION} || echo "⚠️ 태그 제거 실패 (무시)"
        
        # 오래된 리비전 정리 (최근 5개만 유지)
        gcloud run revisions list \
          --service=${_SERVICE_NAME} \
          --region=${_REGION} \
          --format="value(metadata.name)" \
          --limit=100 \
          | tail -n +6 \
          | xargs -I {} gcloud run revisions delete {} \
            --region=${_REGION} \
            --quiet || echo "⚠️ 이전 리비전 정리 실패 (무시)"
        
        echo "✅ 정리 완료"
    id: 'cleanup'
    waitFor: ['traffic-switch']

# 빌드 옵션
options:
  # 빌드 로그를 Cloud Logging에만 저장
  logging: CLOUD_LOGGING_ONLY
  
  # 빌드 머신 스펙 (더 빠른 빌드를 위해)
  machineType: 'E2_HIGHCPU_8'
  
# 서비스 계정 (필요한 권한: Cloud Run Admin, Artifact Registry Writer, Security Scanner)
serviceAccount: 'projects/${_PROJECT_ID}/serviceAccounts/${_SERVICE_ACCOUNT}'

# 이미지 저장소에서 오래된 이미지 자동 삭제 (선택사항)
images:
  - '${_ARTIFACT_REGISTRY}/${_PROJECT_ID}/${_REPO_NAME}/${_SERVICE_NAME}:${SHORT_SHA}'
  - '${_ARTIFACT_REGISTRY}/${_PROJECT_ID}/${_REPO_NAME}/${_SERVICE_NAME}:latest'