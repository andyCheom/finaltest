# Firebase Hosting CI/CD Pipeline
name: Firebase Hosting Deploy

# Ìä∏Î¶¨Í±∞ Ï°∞Í±¥
on:
  # Pull RequestÏóê ÎåÄÌïú ÌîÑÎ¶¨Î∑∞ Î∞∞Ìè¨
  pull_request:
    branches:
      - main
      - develop
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '.gitignore'
      - 'modules/**'
      - 'requirements.txt'
      - 'Dockerfile'
      - 'cloudbuild.yaml'
  
  # Î∏åÎûúÏπò Ìë∏Ïãú Ïãú Î∞∞Ìè¨
  push:
    branches:
      - main      # ÌîÑÎ°úÎçïÏÖò Î∞∞Ìè¨
      - develop   # Ïä§ÌÖåÏù¥Ïßï Î∞∞Ìè¨
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '.gitignore'
      - 'modules/**'
      - 'requirements.txt'
      - 'Dockerfile'
      - 'cloudbuild.yaml'
  
  # ÏàòÎèô Ïã§Ìñâ
  workflow_dispatch:
    inputs:
      environment:
        description: 'Î∞∞Ìè¨ ÌôòÍ≤Ω'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

# ÌôòÍ≤Ω Î≥ÄÏàò
env:
  NODE_VERSION: '18'
  FIREBASE_PROJECT_ID: cheom-kdb-test1

jobs:
  # ÎπåÎìú Î∞è Í≤ÄÏ¶ù
  build:
    name: Build and Validate
    runs-on: ubuntu-latest
    
    steps:
      # 1. ÏΩîÎìú Ï≤¥ÌÅ¨ÏïÑÏõÉ
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      # 2. Node.js ÏÑ§Ï†ï
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      # 3. ÏùòÏ°¥ÏÑ± ÏÑ§Ïπò (public ÎîîÎ†âÌÜ†Î¶¨ÏóêÏÑú)
      - name: Install dependencies
        run: |
          if [ -f "public/package.json" ]; then
            cd public
            npm ci
          else
            echo "‚ö†Ô∏è public/package.json not found, skipping npm install"
          fi
      
      # 4. ÌîÑÎ°úÏ†ùÌä∏ ÎπåÎìú
      - name: Build project
        run: |
          if [ -f "public/package.json" ]; then
            cd public
            npm run build || echo "‚ö†Ô∏è No build script found"
          else
            echo "‚úÖ Static files ready for deployment"
          fi
      
      # 5. Firebase ÏÑ§Ï†ï Í≤ÄÏ¶ù
      - name: Validate Firebase configuration
        run: |
          echo "üîç Firebase ÏÑ§Ï†ï Í≤ÄÏ¶ù Ï§ë..."
          
          # firebase.json Ï°¥Ïû¨ ÌôïÏù∏
          if [ ! -f "firebase.json" ]; then
            echo "‚ùå firebase.jsonÏù¥ Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏäµÎãàÎã§."
            exit 1
          fi
          
          # public ÎîîÎ†âÌÜ†Î¶¨ ÌôïÏù∏
          if [ ! -d "public" ]; then
            echo "‚ùå public ÎîîÎ†âÌÜ†Î¶¨Í∞Ä Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏäµÎãàÎã§."
            exit 1
          fi
          
          # index.html ÌôïÏù∏
          if [ ! -f "public/index.html" ]; then
            echo "‚ùå public/index.htmlÏù¥ Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏäµÎãàÎã§."
            exit 1
          fi
          
          echo "‚úÖ Firebase ÏÑ§Ï†ï Í≤ÄÏ¶ù ÏôÑÎ£å"
      
      # 6. ÎπåÎìú ÏïÑÌã∞Ìå©Ìä∏ ÏóÖÎ°úÎìú
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: firebase-build-${{ github.sha }}
          path: public/
          retention-days: 1

  # Pull RequestÏö© ÌîÑÎ¶¨Î∑∞ Î∞∞Ìè¨
  preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: firebase-build-${{ github.sha }}
          path: public/
      
      - name: Deploy to Firebase Hosting Preview
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          projectId: ${{ env.FIREBASE_PROJECT_ID }}
          channelId: preview-${{ github.event.number }}
          expires: 7d
        env:
          FIREBASE_CLI_EXPERIMENTS: webframeworks

  # Ïä§ÌÖåÏù¥Ïßï Î∞∞Ìè¨ (develop Î∏åÎûúÏπò)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    environment:
      name: staging
      url: https://staging--${{ env.FIREBASE_PROJECT_ID }}.web.app
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: firebase-build-${{ github.sha }}
          path: public/
      
      # Ïä§ÌÖåÏù¥Ïßï ÌôòÍ≤Ω ÏÑ§Ï†ï ÌôïÏù∏
      - name: Verify Firebase config for staging
        run: |
          echo "üîß Ïä§ÌÖåÏù¥Ïßï ÌôòÍ≤Ω ÏÑ§Ï†ï ÌôïÏù∏ Ï§ë..."
          echo "ÌòÑÏû¨ serviceId: $(grep -o '"serviceId": "[^"]*"' firebase.json)"
          echo "‚úÖ Ïä§ÌÖåÏù¥Ïßï ÏÑ§Ï†ï ÌôïÏù∏ ÏôÑÎ£å"
      
      - name: Deploy to Firebase Hosting Staging
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          projectId: ${{ env.FIREBASE_PROJECT_ID }}
          channelId: staging
        env:
          FIREBASE_CLI_EXPERIMENTS: webframeworks
      
      # Ïä§ÌÖåÏù¥Ïßï Î∞∞Ìè¨ ÌõÑ Ìó¨Ïä§ Ï≤¥ÌÅ¨
      - name: Health check staging
        run: |
          echo "üè• Ïä§ÌÖåÏù¥Ïßï Ìó¨Ïä§ Ï≤¥ÌÅ¨ Ï§ë..."
          STAGING_URL="https://staging--${{ env.FIREBASE_PROJECT_ID }}.web.app"
          
          for i in {1..5}; do
            echo "Ìó¨Ïä§ Ï≤¥ÌÅ¨ ÏãúÎèÑ $i/5..."
            if curl -f -s --max-time 30 "$STAGING_URL" > /dev/null; then
              echo "‚úÖ Ïä§ÌÖåÏù¥Ïßï Î∞∞Ìè¨ ÏÑ±Í≥µ!"
              exit 0
            fi
            
            if [ $i -lt 5 ]; then
              echo "30Ï¥à ÌõÑ Ïû¨ÏãúÎèÑ..."
              sleep 30
            fi
          done
          
          echo "‚ùå Ïä§ÌÖåÏù¥Ïßï Ìó¨Ïä§ Ï≤¥ÌÅ¨ Ïã§Ìå®"
          exit 1

  # ÌîÑÎ°úÎçïÏÖò Î∞∞Ìè¨ (main Î∏åÎûúÏπò)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: https://${{ env.FIREBASE_PROJECT_ID }}.web.app
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: firebase-build-${{ github.sha }}
          path: public/
      
      # ÌîÑÎ°úÎçïÏÖò ÌôòÍ≤Ω ÏÑ§Ï†ï ÏóÖÎç∞Ïù¥Ìä∏
      - name: Update Firebase config for production
        run: |
          echo "üîß ÌîÑÎ°úÎçïÏÖò ÌôòÍ≤Ω ÏÑ§Ï†ï Ï†ÅÏö© Ï§ë..."
          
          # firebase.jsonÏóêÏÑú ÏÑúÎπÑÏä§ IDÎ•º ÌîÑÎ°úÎçïÏÖòÏö©ÏúºÎ°ú Î≥ÄÍ≤Ω
          sed -i 's/"serviceId": "testing0724"/"serviceId": "graphrag-api"/' firebase.json
          
          echo "‚úÖ ÌîÑÎ°úÎçïÏÖò ÏÑ§Ï†ï ÏôÑÎ£å"
      
      - name: Deploy to Firebase Hosting Production
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          projectId: ${{ env.FIREBASE_PROJECT_ID }}
          channelId: live
        env:
          FIREBASE_CLI_EXPERIMENTS: webframeworks
      
      # ÌîÑÎ°úÎçïÏÖò Î∞∞Ìè¨ ÌõÑ Ìó¨Ïä§ Ï≤¥ÌÅ¨
      - name: Health check production
        run: |
          echo "üè• ÌîÑÎ°úÎçïÏÖò Ìó¨Ïä§ Ï≤¥ÌÅ¨ Ï§ë..."
          PROD_URL="https://${{ env.FIREBASE_PROJECT_ID }}.web.app"
          
          for i in {1..10}; do
            echo "Ìó¨Ïä§ Ï≤¥ÌÅ¨ ÏãúÎèÑ $i/10..."
            if curl -f -s --max-time 30 "$PROD_URL" > /dev/null; then
              echo "‚úÖ ÌîÑÎ°úÎçïÏÖò Î∞∞Ìè¨ ÏÑ±Í≥µ!"
              echo "PROD_URL=$PROD_URL" >> $GITHUB_OUTPUT
              exit 0
            fi
            
            if [ $i -lt 10 ]; then
              echo "30Ï¥à ÌõÑ Ïû¨ÏãúÎèÑ..."
              sleep 30
            fi
          done
          
          echo "‚ùå ÌîÑÎ°úÎçïÏÖò Ìó¨Ïä§ Ï≤¥ÌÅ¨ Ïã§Ìå®"
          exit 1
        id: health-check
      
      # ÌîÑÎ°úÎçïÏÖò ÏÑ±Îä• Í∞êÏÇ¨ (Lighthouse CI)
      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            https://${{ env.FIREBASE_PROJECT_ID }}.web.app
          configPath: './.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true
          artifactName: lighthouse-reports-${{ github.sha }}
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # Î∞∞Ìè¨ ÏïåÎ¶º
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result != 'skipped' || needs.deploy-production.result != 'skipped')
    
    steps:
      - name: Determine deployment result
        run: |
          if [[ "${{ needs.deploy-staging.result }}" == "success" || "${{ needs.deploy-production.result }}" == "success" ]]; then
            echo "DEPLOYMENT_STATUS=success" >> $GITHUB_ENV
            echo "DEPLOYMENT_EMOJI=üéâ" >> $GITHUB_ENV
          else
            echo "DEPLOYMENT_STATUS=failure" >> $GITHUB_ENV
            echo "DEPLOYMENT_EMOJI=‚ùå" >> $GITHUB_ENV
          fi
          
          # ÌôòÍ≤Ω Í≤∞Ï†ï
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "DEPLOYMENT_ENV=Production" >> $GITHUB_ENV
            echo "DEPLOYMENT_URL=https://${{ env.FIREBASE_PROJECT_ID }}.web.app" >> $GITHUB_ENV
          else
            echo "DEPLOYMENT_ENV=Staging" >> $GITHUB_ENV
            echo "DEPLOYMENT_URL=https://staging--${{ env.FIREBASE_PROJECT_ID }}.web.app" >> $GITHUB_ENV
          fi
      
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "${{ env.DEPLOYMENT_EMOJI }} Firebase Hosting Î∞∞Ìè¨ ${{ env.DEPLOYMENT_STATUS == 'success' && 'ÏÑ±Í≥µ' || 'Ïã§Ìå®' }}!",
              "attachments": [{
                "color": "${{ env.DEPLOYMENT_STATUS == 'success' && 'good' || 'danger' }}",
                "fields": [
                  {
                    "title": "ÌôòÍ≤Ω",
                    "value": "${{ env.DEPLOYMENT_ENV }}",
                    "short": true
                  },
                  {
                    "title": "Î∏åÎûúÏπò",
                    "value": "${{ github.ref_name }}",
                    "short": true
                  },
                  {
                    "title": "Ïª§Î∞ã",
                    "value": "${{ github.sha }}".substring(0, 7),
                    "short": true
                  },
                  {
                    "title": "URL",
                    "value": "${{ env.DEPLOYMENT_URL }}",
                    "short": true
                  },
                  {
                    "title": "ÏõåÌÅ¨ÌîåÎ°úÏö∞",
                    "value": "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Details>",
                    "short": false
                  }
                ]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: env.DEPLOYMENT_STATUS != '' && env.SLACK_WEBHOOK_URL != ''

