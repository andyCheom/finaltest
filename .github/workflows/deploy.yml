# GitHub Actions - GraphRAG 챗봇 API 지속적 배포
name: Deploy to Cloud Run

# 트리거 조건
on:
  # main 브랜치에 푸시될 때
  push:
    branches:
      - main
      - develop
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '.gitignore'
  
  # 수동 실행
  workflow_dispatch:
    inputs:
      environment:
        description: '배포 환경'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

# 환경 변수
env:
  PROJECT_ID: cheom-kdb-test1
  REGION: asia-northeast3
  SERVICE_NAME: testing0724

jobs:
  # 빌드 및 배포
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    
    # 권한 설정
    permissions:
      contents: read
      id-token: write
    
    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 전체 히스토리 가져오기 (태그 정보 포함)
      
      # 2. Google Cloud 인증
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      
      # 3. Cloud SDK 설정
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
      
      # 4. Artifact Registry 인증
      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker asia-northeast3-docker.pkg.dev
      
      # 5. 환경별 변수 설정
      - name: Set environment variables
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" || "${{ github.event.inputs.environment }}" == "production" ]]; then
            echo "ENVIRONMENT=production" >> $GITHUB_ENV
            echo "SERVICE_NAME=graphrag-api" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=staging" >> $GITHUB_ENV
            echo "SERVICE_NAME=testing0724" >> $GITHUB_ENV
          fi
          
          # 짧은 커밋 SHA 생성
          echo "SHORT_SHA=${GITHUB_SHA:0:7}" >> $GITHUB_ENV
      
      # 6. 종속성 캐시
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      
      # 7. Cloud Build 실행
      - name: Run Cloud Build
        run: |
          gcloud builds submit \
            --config=cloudbuild.yaml \
            --substitutions=_SERVICE_NAME=${{ env.SERVICE_NAME }},SHORT_SHA=${{ env.SHORT_SHA }},BRANCH_NAME=${{ github.ref_name }} \
            --timeout=1200s
      
      # 8. 배포 결과 확인
      - name: Verify deployment
        run: |
          echo "🔍 배포 상태 확인 중..."
          
          # 서비스 URL 가져오기
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --format="value(status.url)")
          
          echo "서비스 URL: $SERVICE_URL"
          
          # 헬스 체크
          for i in {1..5}; do
            echo "헬스 체크 시도 $i/5..."
            if curl -f -s --max-time 30 "$SERVICE_URL/api/health" > /dev/null; then
              echo "✅ 배포 성공!"
              echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_OUTPUT
              exit 0
            fi
            
            if [ $i -lt 5 ]; then
              echo "30초 후 재시도..."
              sleep 30
            fi
          done
          
          echo "❌ 배포 검증 실패"
          exit 1
      
      # 9. Slack 알림 (성공)
      - name: Notify success to Slack
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: |
            🎉 GraphRAG API 배포 성공!
            • 환경: ${{ env.ENVIRONMENT }}
            • 브랜치: ${{ github.ref_name }}
            • 커밋: ${{ env.SHORT_SHA }}
            • 서비스: ${{ steps.verify-deployment.outputs.SERVICE_URL }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      
      # 10. Slack 알림 (실패)
      - name: Notify failure to Slack
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            ❌ GraphRAG API 배포 실패
            • 환경: ${{ env.ENVIRONMENT }}
            • 브랜치: ${{ github.ref_name }}
            • 커밋: ${{ env.SHORT_SHA }}
            • 로그: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # 보안 스캔 (별도 잡)
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: deploy
    if: always() && (needs.deploy.result == 'success')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      # 환경 변수 설정 (deploy job과 동일)
      - name: Set environment variables
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" || "${{ github.event.inputs.environment }}" == "production" ]]; then
            echo "ENVIRONMENT=production" >> $GITHUB_ENV
            echo "SERVICE_NAME=graphrag-api" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=staging" >> $GITHUB_ENV
            echo "SERVICE_NAME=testing0724" >> $GITHUB_ENV
          fi
          
          # 짧은 커밋 SHA 생성
          echo "SHORT_SHA=${GITHUB_SHA:0:7}" >> $GITHUB_ENV
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'asia-northeast3-docker.pkg.dev/${{ env.PROJECT_ID }}/trialanderror0724/${{ env.SERVICE_NAME }}:${{ env.SHORT_SHA }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('trivy-results.sarif') != ''
        with:
          sarif_file: 'trivy-results.sarif'